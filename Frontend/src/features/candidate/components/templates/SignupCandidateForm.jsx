import { Form, Input, Button, Typography, Space, Checkbox } from "antd";
import { MailOutlined, LockOutlined, UserOutlined } from "@ant-design/icons";
import "../../styles/SignupCandidateForm.css";

const { Title, Text } = Typography;

const SignupCandidateForm = () => {
  const [form] = Form.useForm();

  const onFinish = (values) => {
    console.log("Form submitted:", values);
  };

  return (
    <div className="signup-container">
      {/* Left side - Image/Illustration */}
      <div className="signup-image-section">
        <div className="image-content">
          <div className="illustration-wrapper">
            <img
              src="/src/assets/logo/logo_ngang.png"
              alt="Signup Illustration"
              className="signup-illustration"
            />
          </div>
          <div className="image-text">
            <Title level={2} className="image-title">
              B·∫Øt ƒë·∫ßu h√†nh tr√¨nh m·ªõi c√πng ch√∫ng t√¥i
            </Title>
            <Text className="image-description">
              Tham gia c·ªông ƒë·ªìng h√†ng tri·ªáu ·ª©ng vi√™n v√† nh√† tuy·ªÉn d·ª•ng. T·∫°o h·ªì
              s∆° c·ªßa b·∫°n v√† kh√°m ph√° nh·ªØng c∆° h·ªôi vi·ªác l√†m tuy·ªát v·ªùi ƒëang ch·ªù
              ƒë√≥n!
            </Text>
          </div>
        </div>
      </div>

      {/* Right side - Signup Form */}
      <div className="signup-form-section">
        <div className="form-wrapper">
          {/* Logo */}
          <div className="logo-section">
            <img src="/src/assets/logo/logo.png" alt="Logo" className="logo" />
          </div>

          {/* Welcome Header */}
          <div className="welcome-header">
            <Title level={1} className="welcome-title">
              T·∫°o t√†i kho·∫£n m·ªõi
              <span className="rocket-emoji">üöÄ</span>
            </Title>
            <Text className="welcome-subtitle">
              Ch·ªâ v√†i b∆∞·ªõc ƒë∆°n gi·∫£n ƒë·ªÉ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm c√¥ng vi·ªác m∆° ∆∞·ªõc
            </Text>
          </div>

          {/* Signup Form */}
          <Form
            form={form}
            name="signupForm"
            onFinish={onFinish}
            layout="vertical"
            size="large"
            className="signup-form"
            scrollToFirstError
          >
            {/* Full Name Field */}
            <Form.Item
              name="fullName"
              label="H·ªç v√† t√™n"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!" },
                { min: 2, message: "H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±!" },
                { max: 50, message: "H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±!" },
                {
                  pattern: /^[a-zA-Z√Ä-·ªπ\s]+$/,
                  message: "H·ªç v√† t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng!",
                },
              ]}
            >
              <Input
                prefix={<UserOutlined className="input-icon" />}
                placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                className="custom-input"
              />
            </Form.Item>

            {/* Email Field */}
            <Form.Item
              name="email"
              label="Email"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p email!" },
                { type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" },
                {
                  pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
                  message: "ƒê·ªãnh d·∫°ng email kh√¥ng ƒë√∫ng!",
                },
              ]}
            >
              <Input
                prefix={<MailOutlined className="input-icon" />}
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                className="custom-input"
              />
            </Form.Item>

            {/* Password Field */}
            <Form.Item
              name="password"
              label="M·∫≠t kh·∫©u"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!" },
                { min: 8, message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±!" },
                {
                  pattern:
                    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/,
                  message:
                    "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng, 1 s·ªë v√† 1 k√Ω t·ª± ƒë·∫∑c bi·ªát!",
                },
              ]}
              hasFeedback
            >
              <Input.Password
                prefix={<LockOutlined className="input-icon" />}
                placeholder="T·∫°o m·∫≠t kh·∫©u m·∫°nh"
                className="custom-input"
              />
            </Form.Item>

            {/* Confirm Password Field */}
            <Form.Item
              name="confirmPassword"
              label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
              dependencies={["password"]}
              rules={[
                { required: true, message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!" },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    if (!value || getFieldValue("password") === value) {
                      return Promise.resolve();
                    }
                    return Promise.reject(
                      new Error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                    );
                  },
                }),
              ]}
              hasFeedback
            >
              <Input.Password
                prefix={<LockOutlined className="input-icon" />}
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                className="custom-input"
              />
            </Form.Item>

            {/* Terms and Conditions */}
            <Form.Item
              name="agreement"
              valuePropName="checked"
              rules={[
                {
                  validator: (_, value) =>
                    value
                      ? Promise.resolve()
                      : Promise.reject(
                          new Error("Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng!")
                        ),
                },
              ]}
            >
              <Checkbox className="agreement-checkbox">
                T√¥i ƒë·ªìng √Ω v·ªõi{" "}
                <a href="/terms" className="terms-link">
                  ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
                </a>{" "}
                v√†{" "}
                <a href="/privacy" className="terms-link">
                  Ch√≠nh s√°ch b·∫£o m·∫≠t
                </a>
              </Checkbox>
            </Form.Item>

            {/* Signup Button */}
            <Form.Item>
              <Button
                type="primary"
                htmlType="submit"
                className="signup-button"
                block
              >
                T·∫°o t√†i kho·∫£n
              </Button>
            </Form.Item>

            {/* Divider */}
            {/* <div className="divider">
              <span className="divider-text">ho·∫∑c</span>
            </div> */}

            {/* Google Signup */}
            {/* <Button
              className="google-signup-button"
              block
              icon={
                <img
                  src="/src/assets/icons/google.png"
                  alt="Google"
                  className="google-icon"
                />
              }
            >
              ƒêƒÉng k√Ω b·∫±ng Google
            </Button> */}

            {/* Login link */}
            <div className="login-section">
              <Text className="login-text">
                ƒê√£ c√≥ t√†i kho·∫£n?
                <a href="/login" className="login-link">
                  ƒêƒÉng nh·∫≠p ngay
                </a>
              </Text>
            </div>
          </Form>
        </div>
      </div>
    </div>
  );
};

export default SignupCandidateForm;
